-- Autogenerated by migration tool on 2022-01-19 11:15:30

-- Resource: bigquery.datasets
CREATE TABLE IF NOT EXISTS "gcp_bigquery_datasets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"creation_time" bigint,
	"default_encryption_configuration_kms_key_name" text,
	"default_partition_expiration_ms" bigint,
	"default_table_expiration_ms" bigint,
	"description" text,
	"etag" text,
	"friendly_name" text,
	"id" text,
	"kind" text,
	"labels" jsonb,
	"last_modified_time" bigint,
	"location" text,
	"satisfies_pzs" boolean,
	"self_link" text,
	CONSTRAINT gcp_bigquery_datasets_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_bigquery_datasets');
CREATE TABLE IF NOT EXISTS "gcp_bigquery_dataset_accesses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"dataset_cq_id" uuid,
	"dataset_id" text,
	"target_types" text[],
	"domain" text,
	"group_by_email" text,
	"iam_member" text,
	"role" text,
	"routine_dataset_id" text,
	"routine_project_id" text,
	"routine_id" text,
	"special_group" text,
	"user_by_email" text,
	"view_dataset_id" text,
	"view_project_id" text,
	"view_table_id" text,
	CONSTRAINT gcp_bigquery_dataset_accesses_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_bigquery_dataset_accesses (cq_fetch_date, dataset_cq_id);
SELECT setup_tsdb_child('gcp_bigquery_dataset_accesses', 'dataset_cq_id', 'gcp_bigquery_datasets', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_bigquery_dataset_tables" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"dataset_cq_id" uuid,
	"dataset_id" text,
	"clustering_fields" text[],
	"creation_time" bigint,
	"description" text,
	"encryption_configuration_kms_key_name" text,
	"etag" text,
	"expiration_time" bigint,
	"external_data_configuration_autodetect" boolean,
	"external_data_configuration_compression" text,
	"external_data_configuration_connection_id" text,
	"external_data_configuration_ignore_unknown_values" boolean,
	"external_data_configuration_max_bad_records" bigint,
	"external_data_configuration_schema" jsonb,
	"external_data_configuration_source_format" text,
	"external_data_configuration_source_uris" text[],
	"friendly_name" text,
	"id" text,
	"kind" text,
	"labels" jsonb,
	"last_modified_time" bigint,
	"location" text,
	"materialized_view_enable_refresh" boolean,
	"materialized_view_last_refresh_time" bigint,
	"materialized_view_query" text,
	"materialized_view_refresh_interval_ms" bigint,
	"model_options_labels" text[],
	"model_options_loss_type" text,
	"model_options_model_type" text,
	"num_bytes" bigint,
	"num_long_term_bytes" bigint,
	"num_physical_bytes" bigint,
	"num_rows" bigint,
	"range_partitioning_field" text,
	"range_partitioning_range_end" bigint,
	"range_partitioning_range_interval" bigint,
	"range_partitioning_range_start" bigint,
	"require_partition_filter" boolean,
	"schema" jsonb,
	"self_link" text,
	"streaming_buffer_estimated_bytes" bigint,
	"streaming_buffer_estimated_rows" bigint,
	"streaming_buffer_oldest_entry_time" bigint,
	"time_partitioning_expiration_ms" bigint,
	"time_partitioning_field" text,
	"time_partitioning_require_partition_filter" boolean,
	"time_partitioning_type" text,
	"type" text,
	"view_query" text,
	"view_use_legacy_sql" boolean,
	CONSTRAINT gcp_bigquery_dataset_tables_pk PRIMARY KEY(cq_fetch_date,dataset_cq_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_bigquery_dataset_tables (cq_fetch_date, dataset_cq_id);
SELECT setup_tsdb_child('gcp_bigquery_dataset_tables', 'dataset_cq_id', 'gcp_bigquery_datasets', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_bigquery_dataset_table_dataset_model_training_runs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"dataset_table_cq_id" uuid,
	"dataset_table_id" text,
	"start_time" text,
	"state" text,
	"training_options_early_stop" boolean,
	"training_options_l1_reg" float,
	"training_options_l2_reg" float,
	"training_options_learn_rate" float,
	"training_options_learn_rate_strategy" text,
	"training_options_line_search_init_learn_rate" float,
	"training_options_max_iteration" bigint,
	"training_options_min_rel_progress" float,
	"training_options_warm_start" boolean,
	CONSTRAINT gcp_bigquery_dataset_table_dataset_model_training_runs_pk PRIMARY KEY(cq_fetch_date,dataset_table_cq_id,start_time),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_bigquery_dataset_table_dataset_model_training_runs (cq_fetch_date, dataset_table_cq_id);
SELECT setup_tsdb_child('gcp_bigquery_dataset_table_dataset_model_training_runs', 'dataset_table_cq_id', 'gcp_bigquery_dataset_tables', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_bigquery_dataset_table_user_defined_functions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"dataset_table_cq_id" uuid,
	"dataset_table_id" text,
	"inline_code" text,
	"resource_uri" text,
	CONSTRAINT gcp_bigquery_dataset_table_user_defined_functions_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_bigquery_dataset_table_user_defined_functions (cq_fetch_date, dataset_table_cq_id);
SELECT setup_tsdb_child('gcp_bigquery_dataset_table_user_defined_functions', 'dataset_table_cq_id', 'gcp_bigquery_dataset_tables', 'cq_id');

-- Resource: cloudfunctions.functions
CREATE TABLE IF NOT EXISTS "gcp_cloudfunctions_functions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"available_memory_mb" bigint,
	"build_environment_variables" jsonb,
	"build_id" text,
	"build_worker_pool" text,
	"description" text,
	"entry_point" text,
	"environment_variables" jsonb,
	"event_trigger_event_type" text,
	"event_trigger_resource" text,
	"event_trigger_service" text,
	"https_trigger_security_level" text,
	"https_trigger_url" text,
	"ingress_settings" text,
	"labels" jsonb,
	"max_instances" bigint,
	"name" text,
	"network" text,
	"runtime" text,
	"service_account_email" text,
	"source_archive_url" text,
	"source_repository_deployed_url" text,
	"source_repository_url" text,
	"source_token" text,
	"source_upload_url" text,
	"status" text,
	"timeout" text,
	"update_time" text,
	"version_id" bigint,
	"vpc_connector" text,
	"vpc_connector_egress_settings" text,
	CONSTRAINT gcp_cloudfunctions_functions_pk PRIMARY KEY(cq_fetch_date,project_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_cloudfunctions_functions');

-- Resource: compute.addresses
CREATE TABLE IF NOT EXISTS "gcp_compute_addresses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"address" text,
	"address_type" text,
	"creation_timestamp" text,
	"description" text,
	"id" text,
	"ip_version" text,
	"kind" text,
	"name" text,
	"network" text,
	"network_tier" text,
	"prefix_length" bigint,
	"purpose" text,
	"region" text,
	"self_link" text,
	"status" text,
	"subnetwork" text,
	"users" text[],
	CONSTRAINT gcp_compute_addresses_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_addresses');

-- Resource: compute.autoscalers
CREATE TABLE IF NOT EXISTS "gcp_compute_autoscalers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"cool_down_period_sec" bigint,
	"cpu_utilization_predictive_method" text,
	"cpu_utilization_utilization_target" float,
	"load_balancing_utilization_utilization_target" float,
	"max_num_replicas" bigint,
	"min_num_replicas" bigint,
	"mode" text,
	"scale_in_control_max_scaled_in_replicas_calculated" bigint,
	"scale_in_control_max_scaled_in_replicas_fixed" bigint,
	"scale_in_control_max_scaled_in_replicas_percent" bigint,
	"scale_in_control_time_window_sec" bigint,
	"scaling_schedules" jsonb,
	"creation_timestamp" text,
	"description" text,
	"id" text,
	"kind" text,
	"name" text,
	"recommended_size" bigint,
	"region" text,
	"scaling_schedule_status" jsonb,
	"self_link" text,
	"status" text,
	"status_details" jsonb,
	"target" text,
	"zone" text,
	CONSTRAINT gcp_compute_autoscalers_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_autoscalers');
CREATE TABLE IF NOT EXISTS "gcp_compute_autoscaler_custom_metric_utilizations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"autoscaler_cq_id" uuid,
	"autoscaler_id" text,
	"filter" text,
	"metric" text,
	"single_instance_assignment" float,
	"utilization_target" float,
	"utilization_target_type" text,
	CONSTRAINT gcp_compute_autoscaler_custom_metric_utilizations_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_autoscaler_custom_metric_utilizations (cq_fetch_date, autoscaler_cq_id);
SELECT setup_tsdb_child('gcp_compute_autoscaler_custom_metric_utilizations', 'autoscaler_cq_id', 'gcp_compute_autoscalers', 'cq_id');

-- Resource: compute.backend_services
CREATE TABLE IF NOT EXISTS "gcp_compute_backend_services" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"affinity_cookie_ttl_sec" bigint,
	"cdn_policy_bypass_cache_on_request_headers" text[],
	"cdn_policy_cache_key_policy_include_host" boolean,
	"cdn_policy_cache_key_policy_include_protocol" boolean,
	"cdn_policy_cache_key_policy_include_query_string" boolean,
	"cdn_policy_cache_key_policy_query_string_blacklist" text[],
	"cdn_policy_cache_key_policy_query_string_whitelist" text[],
	"cdn_policy_cache_mode" text,
	"cdn_policy_client_ttl" bigint,
	"cdn_policy_default_ttl" bigint,
	"cdn_policy_max_ttl" bigint,
	"cdn_policy_negative_caching" boolean,
	"cdn_policy_negative_caching_policy" jsonb,
	"cdn_policy_request_coalescing" boolean,
	"cdn_policy_serve_while_stale" bigint,
	"cdn_policy_signed_url_cache_max_age_sec" bigint,
	"cdn_policy_signed_url_key_names" text[],
	"circuit_breakers_max_connections" bigint,
	"circuit_breakers_max_pending_requests" bigint,
	"circuit_breakers_max_requests" bigint,
	"circuit_breakers_max_requests_per_connection" bigint,
	"circuit_breakers_max_retries" bigint,
	"connection_draining_draining_timeout_sec" bigint,
	"consistent_hash_http_cookie_name" text,
	"consistent_hash_http_cookie_path" text,
	"consistent_hash_http_cookie_ttl_nanos" bigint,
	"consistent_hash_http_cookie_ttl_seconds" bigint,
	"consistent_hash_http_header_name" text,
	"consistent_hash_minimum_ring_size" bigint,
	"creation_timestamp" text,
	"custom_request_headers" text[],
	"custom_response_headers" text[],
	"description" text,
	"enable_cdn" boolean,
	"failover_policy_disable_connection_drain_on_failover" boolean,
	"failover_policy_drop_traffic_if_unhealthy" boolean,
	"failover_policy_failover_ratio" float,
	"fingerprint" text,
	"health_checks" text[],
	"iap_enabled" boolean,
	"iap_oauth2_client_id" text,
	"iap_oauth2_client_secret" text,
	"iap_oauth2_client_secret_sha256" text,
	"id" text,
	"kind" text,
	"load_balancing_scheme" text,
	"locality_lb_policy" text,
	"log_config_enable" boolean,
	"log_config_sample_rate" float,
	"max_stream_duration_nanos" bigint,
	"max_stream_duration_seconds" bigint,
	"name" text,
	"network" text,
	"outlier_detection_base_ejection_time_nanos" bigint,
	"outlier_detection_base_ejection_time_seconds" bigint,
	"outlier_detection_consecutive_errors" bigint,
	"outlier_detection_consecutive_gateway_failure" bigint,
	"outlier_detection_enforcing_consecutive_errors" bigint,
	"outlier_detection_enforcing_consecutive_gateway_failure" bigint,
	"outlier_detection_enforcing_success_rate" bigint,
	"outlier_detection_interval_nanos" bigint,
	"outlier_detection_interval_seconds" bigint,
	"outlier_detection_max_ejection_percent" bigint,
	"outlier_detection_success_rate_minimum_hosts" bigint,
	"outlier_detection_success_rate_request_volume" bigint,
	"outlier_detection_success_rate_stdev_factor" bigint,
	"port" bigint,
	"port_name" text,
	"protocol" text,
	"region" text,
	"security_policy" text,
	"security_settings_client_tls_policy" text,
	"security_settings_subject_alt_names" text[],
	"self_link" text,
	"session_affinity" text,
	"timeout_sec" bigint,
	CONSTRAINT gcp_compute_backend_services_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_backend_services');
CREATE TABLE IF NOT EXISTS "gcp_compute_backend_service_backends" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"backend_service_cq_id" uuid,
	"backend_service_id" text,
	"balancing_mode" text,
	"capacity_scaler" float,
	"description" text,
	"failover" boolean,
	"group" text,
	"max_connections" bigint,
	"max_connections_per_endpoint" bigint,
	"max_connections_per_instance" bigint,
	"max_rate" bigint,
	"max_rate_per_endpoint" float,
	"max_rate_per_instance" float,
	"max_utilization" float,
	CONSTRAINT gcp_compute_backend_service_backends_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_backend_service_backends (cq_fetch_date, backend_service_cq_id);
SELECT setup_tsdb_child('gcp_compute_backend_service_backends', 'backend_service_cq_id', 'gcp_compute_backend_services', 'cq_id');

-- Resource: compute.disk_types
CREATE TABLE IF NOT EXISTS "gcp_compute_disk_types" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"creation_timestamp" text,
	"default_disk_size_gb" bigint,
	"deprecated_deleted" text,
	"deprecated" text,
	"deprecated_obsolete" text,
	"deprecated_replacement" text,
	"deprecated_state" text,
	"description" text,
	"id" text,
	"kind" text,
	"name" text,
	"region" text,
	"self_link" text,
	"valid_disk_size" text,
	"zone" text,
	CONSTRAINT gcp_compute_disk_types_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_disk_types');

-- Resource: compute.disks
CREATE TABLE IF NOT EXISTS "gcp_compute_disks" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"creation_timestamp" text,
	"description" text,
	"disk_encryption_key_kms_key_name" text,
	"disk_encryption_key_kms_key_service_account" text,
	"disk_encryption_key_raw_key" text,
	"disk_encryption_key_sha256" text,
	"guest_os_features" text[],
	"id" text,
	"kind" text,
	"label_fingerprint" text,
	"labels" jsonb,
	"last_attach_timestamp" text,
	"last_detach_timestamp" text,
	"licenses" text[],
	"location_hint" text,
	"name" text,
	"options" text,
	"physical_block_size_bytes" bigint,
	"provisioned_iops" bigint,
	"region" text,
	"replica_zones" text[],
	"resource_policies" text[],
	"satisfies_pzs" boolean,
	"self_link" text,
	"size_gb" bigint,
	"source_disk" text,
	"source_disk_id" text,
	"source_image" text,
	"source_image_encryption_key_kms_key_name" text,
	"source_image_encryption_key_kms_key_service_account" text,
	"source_image_encryption_key_raw_key" text,
	"source_image_encryption_key_sha256" text,
	"source_image_id" text,
	"source_snapshot" text,
	"source_snapshot_encryption_key_kms_key_name" text,
	"source_snapshot_encryption_key_kms_key_service_account" text,
	"source_snapshot_encryption_key_raw_key" text,
	"source_snapshot_encryption_key_sha256" text,
	"source_snapshot_id" text,
	"source_storage_object" text,
	"status" text,
	"type" text,
	"users" text[],
	"zone" text,
	CONSTRAINT gcp_compute_disks_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_disks');

-- Resource: compute.firewalls
CREATE TABLE IF NOT EXISTS "gcp_compute_firewalls" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"creation_timestamp" text,
	"description" text,
	"destination_ranges" text[],
	"direction" text,
	"disabled" boolean,
	"id" text,
	"kind" text,
	"log_config_enable" boolean,
	"log_config_metadata" text,
	"name" text,
	"network" text,
	"priority" bigint,
	"self_link" text,
	"source_ranges" text[],
	"source_service_accounts" text[],
	"source_tags" text[],
	"target_service_accounts" text[],
	"target_tags" text[],
	CONSTRAINT gcp_compute_firewalls_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_firewalls');
CREATE TABLE IF NOT EXISTS "gcp_compute_firewall_allowed" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"firewall_cq_id" uuid,
	"firewall_id" text,
	"ip_protocol" text,
	"ports" text[],
	CONSTRAINT gcp_compute_firewall_allowed_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_firewall_allowed (cq_fetch_date, firewall_cq_id);
SELECT setup_tsdb_child('gcp_compute_firewall_allowed', 'firewall_cq_id', 'gcp_compute_firewalls', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_compute_firewall_denied" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"firewall_cq_id" uuid,
	"firewall_id" text,
	"ip_protocol" text,
	"ports" text[],
	CONSTRAINT gcp_compute_firewall_denied_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_firewall_denied (cq_fetch_date, firewall_cq_id);
SELECT setup_tsdb_child('gcp_compute_firewall_denied', 'firewall_cq_id', 'gcp_compute_firewalls', 'cq_id');

-- Resource: compute.forwarding_rules
CREATE TABLE IF NOT EXISTS "gcp_compute_forwarding_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"ip_address" text,
	"ip_protocol" text,
	"all_ports" boolean,
	"allow_global_access" boolean,
	"backend_service" text,
	"creation_timestamp" text,
	"description" text,
	"fingerprint" text,
	"id" text,
	"ip_version" text,
	"is_mirroring_collector" boolean,
	"kind" text,
	"label_fingerprint" text,
	"labels" jsonb,
	"load_balancing_scheme" text,
	"name" text,
	"network" text,
	"network_tier" text,
	"port_range" text,
	"ports" text[],
	"psc_connection_id" bigint,
	"region" text,
	"self_link" text,
	"service_label" text,
	"service_name" text,
	"subnetwork" text,
	"target" text,
	CONSTRAINT gcp_compute_forwarding_rules_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_forwarding_rules');

-- Resource: compute.images
CREATE TABLE IF NOT EXISTS "gcp_compute_images" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"archive_size_bytes" bigint,
	"creation_timestamp" text,
	"deprecated_deleted" text,
	"deprecated" text,
	"deprecated_obsolete" text,
	"deprecated_replacement" text,
	"deprecated_state" text,
	"description" text,
	"disk_size_gb" bigint,
	"family" text,
	"guest_os_features" text[],
	"id" text,
	"image_encryption_key_kms_key_name" text,
	"image_encryption_key_kms_key_service_account" text,
	"image_encryption_key_raw_key" text,
	"image_encryption_key_sha256" text,
	"kind" text,
	"label_fingerprint" text,
	"labels" jsonb,
	"licenses" text[],
	"name" text,
	"raw_disk_container_type" text,
	"raw_disk_source" text,
	"satisfies_pzs" boolean,
	"self_link" text,
	"shielded_instance_initial_state_pk_content" text,
	"shielded_instance_initial_state_pk_file_type" text,
	"source_disk" text,
	"source_disk_encryption_key_kms_key_name" text,
	"source_disk_encryption_key_kms_key_service_account" text,
	"source_disk_encryption_key_raw_key" text,
	"source_disk_encryption_key_sha256" text,
	"source_disk_id" text,
	"source_image" text,
	"source_image_encryption_key_kms_key_name" text,
	"source_image_encryption_key_kms_key_service_account" text,
	"source_image_encryption_key_raw_key" text,
	"source_image_encryption_key_sha256" text,
	"source_image_id" text,
	"source_snapshot" text,
	"source_snapshot_encryption_key_kms_key_name" text,
	"source_snapshot_encryption_key_kms_key_service_account" text,
	"source_snapshot_encryption_key_raw_key" text,
	"source_snapshot_encryption_key_sha256" text,
	"source_snapshot_id" text,
	"source_type" text,
	"status" text,
	"storage_locations" text[],
	CONSTRAINT gcp_compute_images_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_images');

-- Resource: compute.instances
CREATE TABLE IF NOT EXISTS "gcp_compute_instances" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"advanced_machine_features_enable_nested_virtualization" boolean,
	"can_ip_forward" boolean,
	"confidential_instance_config_enable_confidential_compute" boolean,
	"cpu_platform" text,
	"creation_timestamp" text,
	"deletion_protection" boolean,
	"description" text,
	"display_device_enable_display" boolean,
	"fingerprint" text,
	"guest_accelerators" jsonb,
	"hostname" text,
	"id" text,
	"kind" text,
	"label_fingerprint" text,
	"labels" jsonb,
	"last_start_timestamp" text,
	"last_stop_timestamp" text,
	"last_suspended_timestamp" text,
	"machine_type" text,
	"metadata_fingerprint" text,
	"metadata_items" jsonb,
	"metadata_kind" text,
	"min_cpu_platform" text,
	"name" text,
	"private_ipv6_google_access" text,
	"reservation_affinity_consume_reservation_type" text,
	"reservation_affinity_key" text,
	"reservation_affinity_values" text[],
	"resource_policies" text[],
	"satisfies_pzs" boolean,
	"scheduling_automatic_restart" boolean,
	"scheduling_location_hint" text,
	"scheduling_min_node_cpus" bigint,
	"scheduling_on_host_maintenance" text,
	"scheduling_preemptible" boolean,
	"self_link" text,
	"shielded_instance_config_enable_integrity_monitoring" boolean,
	"shielded_instance_config_enable_secure_boot" boolean,
	"shielded_instance_config_enable_vtpm" boolean,
	"shielded_instance_integrity_policy_update_auto_learn_policy" boolean,
	"start_restricted" boolean,
	"status" text,
	"status_message" text,
	"tags_fingerprint" text,
	"tags_items" text[],
	"zone" text,
	CONSTRAINT gcp_compute_instances_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_instances');
CREATE TABLE IF NOT EXISTS "gcp_compute_instance_disks" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"instance_cq_id" uuid,
	"instance_id" text,
	"auto_delete" boolean,
	"boot" boolean,
	"device_name" text,
	"disk_encryption_key_kms_key_name" text,
	"disk_encryption_key_kms_key_service_account" text,
	"disk_encryption_key_raw_key" text,
	"disk_encryption_key_sha256" text,
	"disk_size_gb" bigint,
	"guest_os_features" text[],
	"index" bigint,
	"description" text,
	"disk_name" text,
	"initialized_disk_size_gb" bigint,
	"disk_type" text,
	"labels" jsonb,
	"on_update_action" text,
	"provisioned_iops" bigint,
	"resource_policies" text[],
	"source_image" text,
	"source_image_encryption_key_kms_key_name" text,
	"source_image_encryption_key_kms_key_service_account" text,
	"source_image_encryption_key_raw_key" text,
	"source_image_encryption_key_sha256" text,
	"source_snapshot" text,
	"source_snapshot_encryption_key_kms_key_name" text,
	"source_snapshot_encryption_key_kms_key_service_account" text,
	"source_snapshot_encryption_key_raw_key" text,
	"source_snapshot_encryption_key_sha256" text,
	"interface" text,
	"kind" text,
	"licenses" text[],
	"mode" text,
	"shielded_instance_initial_state_pk_content" text,
	"shielded_instance_initial_state_pk_file_type" text,
	"source" text,
	"type" text,
	CONSTRAINT gcp_compute_instance_disks_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_instance_disks (cq_fetch_date, instance_cq_id);
SELECT setup_tsdb_child('gcp_compute_instance_disks', 'instance_cq_id', 'gcp_compute_instances', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_compute_instance_network_interfaces" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"instance_cq_id" uuid,
	"instance_id" text,
	"fingerprint" text,
	"ipv6_address" text,
	"kind" text,
	"name" text,
	"network" text,
	"network_ip" text,
	"nic_type" text,
	"subnetwork" text,
	CONSTRAINT gcp_compute_instance_network_interfaces_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_instance_network_interfaces (cq_fetch_date, instance_cq_id);
SELECT setup_tsdb_child('gcp_compute_instance_network_interfaces', 'instance_cq_id', 'gcp_compute_instances', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_compute_instance_network_interface_access_configs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"instance_network_interface_cq_id" uuid,
	"instance_network_interface_name" text,
	"kind" text,
	"name" text,
	"nat_ip" text,
	"network_tier" text,
	"public_ptr_domain_name" text,
	"set_public_ptr" boolean,
	"type" text,
	CONSTRAINT gcp_compute_instance_network_interface_access_configs_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_instance_network_interface_access_configs (cq_fetch_date, instance_network_interface_cq_id);
SELECT setup_tsdb_child('gcp_compute_instance_network_interface_access_configs', 'instance_network_interface_cq_id', 'gcp_compute_instance_network_interfaces', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_compute_instance_network_interface_alias_ip_ranges" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"instance_network_interface_cq_id" uuid,
	"instance_network_interface_name" text,
	"ip_cidr_range" text,
	"subnetwork_range_name" text,
	CONSTRAINT gcp_compute_instance_network_interface_alias_ip_ranges_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_instance_network_interface_alias_ip_ranges (cq_fetch_date, instance_network_interface_cq_id);
SELECT setup_tsdb_child('gcp_compute_instance_network_interface_alias_ip_ranges', 'instance_network_interface_cq_id', 'gcp_compute_instance_network_interfaces', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_compute_instance_scheduling_node_affinities" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"instance_cq_id" uuid,
	"instance_id" text,
	"key" text,
	"operator" text,
	"values" text[],
	CONSTRAINT gcp_compute_instance_scheduling_node_affinities_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_instance_scheduling_node_affinities (cq_fetch_date, instance_cq_id);
SELECT setup_tsdb_child('gcp_compute_instance_scheduling_node_affinities', 'instance_cq_id', 'gcp_compute_instances', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_compute_instance_service_accounts" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"instance_cq_id" uuid,
	"instance_id" text,
	"email" text,
	"scopes" text[],
	CONSTRAINT gcp_compute_instance_service_accounts_pk PRIMARY KEY(cq_fetch_date,instance_cq_id,email),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_instance_service_accounts (cq_fetch_date, instance_cq_id);
SELECT setup_tsdb_child('gcp_compute_instance_service_accounts', 'instance_cq_id', 'gcp_compute_instances', 'cq_id');

-- Resource: compute.interconnects
CREATE TABLE IF NOT EXISTS "gcp_compute_interconnects" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"admin_enabled" boolean,
	"creation_timestamp" text,
	"customer_name" text,
	"description" text,
	"google_ip_address" text,
	"google_reference_id" text,
	"id" text,
	"interconnect_attachments" text[],
	"interconnect_type" text,
	"kind" text,
	"link_type" text,
	"location" text,
	"name" text,
	"noc_contact_email" text,
	"operational_status" text,
	"peer_ip_address" text,
	"provisioned_link_count" bigint,
	"requested_link_count" bigint,
	"self_link" text,
	"state" text,
	CONSTRAINT gcp_compute_interconnects_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_interconnects');
CREATE TABLE IF NOT EXISTS "gcp_compute_interconnect_circuit_infos" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"interconnect_cq_id" uuid,
	"interconnect_id" text,
	"customer_demarc_id" text,
	"google_circuit_id" text,
	"google_demarc_id" text,
	CONSTRAINT gcp_compute_interconnect_circuit_infos_pk PRIMARY KEY(cq_fetch_date,interconnect_cq_id,google_circuit_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_interconnect_circuit_infos (cq_fetch_date, interconnect_cq_id);
SELECT setup_tsdb_child('gcp_compute_interconnect_circuit_infos', 'interconnect_cq_id', 'gcp_compute_interconnects', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_compute_interconnect_expected_outages" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"interconnect_cq_id" uuid,
	"interconnect_id" text,
	"affected_circuits" text[],
	"description" text,
	"end_time" bigint,
	"issue_type" text,
	"name" text,
	"source" text,
	"start_time" bigint,
	"state" text,
	CONSTRAINT gcp_compute_interconnect_expected_outages_pk PRIMARY KEY(cq_fetch_date,interconnect_cq_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_interconnect_expected_outages (cq_fetch_date, interconnect_cq_id);
SELECT setup_tsdb_child('gcp_compute_interconnect_expected_outages', 'interconnect_cq_id', 'gcp_compute_interconnects', 'cq_id');

-- Resource: compute.networks
CREATE TABLE IF NOT EXISTS "gcp_compute_networks" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"ip_v4_range" text,
	"auto_create_subnetworks" boolean,
	"creation_timestamp" text,
	"description" text,
	"gateway_ip_v4" text,
	"id" text,
	"kind" text,
	"mtu" bigint,
	"name" text,
	"routing_config_routing_mode" text,
	"self_link" text,
	"subnetworks" text[],
	CONSTRAINT gcp_compute_networks_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_networks');
CREATE TABLE IF NOT EXISTS "gcp_compute_network_peerings" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"network_cq_id" uuid,
	"network_name" text,
	"auto_create_routes" boolean,
	"exchange_subnet_routes" boolean,
	"export_custom_routes" boolean,
	"export_subnet_routes_with_public_ip" boolean,
	"import_custom_routes" boolean,
	"import_subnet_routes_with_public_ip" boolean,
	"name" text,
	"network" text,
	"peer_mtu" bigint,
	"state" text,
	"state_details" text,
	CONSTRAINT gcp_compute_network_peerings_pk PRIMARY KEY(cq_fetch_date,network_cq_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_network_peerings (cq_fetch_date, network_cq_id);
SELECT setup_tsdb_child('gcp_compute_network_peerings', 'network_cq_id', 'gcp_compute_networks', 'cq_id');

-- Resource: compute.projects
CREATE TABLE IF NOT EXISTS "gcp_compute_projects" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"common_instance_metadata_fingerprint" text,
	"common_instance_metadata_items" jsonb,
	"common_instance_metadata_kind" text,
	"creation_timestamp" timestamp without time zone,
	"default_network_tier" text,
	"default_service_account" text,
	"description" text,
	"enabled_features" text[],
	"compute_project_id" text,
	"kind" text,
	"name" text,
	"self_link" text,
	"usage_export_location_bucket_name" text,
	"usage_export_location_report_name_prefix" text,
	"xpn_project_status" text,
	CONSTRAINT gcp_compute_projects_pk PRIMARY KEY(cq_fetch_date,project_id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_projects');
CREATE TABLE IF NOT EXISTS "gcp_compute_project_quotas" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_cq_id" uuid,
	"project_id" text,
	"limit" float,
	"metric" text,
	"owner" text,
	"usage" float,
	CONSTRAINT gcp_compute_project_quotas_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_project_quotas (cq_fetch_date, project_cq_id);
SELECT setup_tsdb_child('gcp_compute_project_quotas', 'project_cq_id', 'gcp_compute_projects', 'cq_id');

-- Resource: compute.ssl_certificates
CREATE TABLE IF NOT EXISTS "gcp_compute_ssl_certificates" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"certificate" text,
	"creation_timestamp" text,
	"description" text,
	"expire_time" text,
	"id" text,
	"kind" text,
	"managed_domain_status" jsonb,
	"managed_domains" text[],
	"managed_status" text,
	"name" text,
	"private_key" text,
	"region" text,
	"self_link" text,
	"self_managed_certificate" text,
	"self_managed_private_key" text,
	"subject_alternative_names" text[],
	"type" text,
	CONSTRAINT gcp_compute_ssl_certificates_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_ssl_certificates');

-- Resource: compute.ssl_policies
CREATE TABLE IF NOT EXISTS "gcp_compute_ssl_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"creation_timestamp" timestamp without time zone,
	"custom_features" text[],
	"description" text,
	"enabled_features" text[],
	"fingerprint" text,
	"id" text,
	"kind" text,
	"min_tls_version" text,
	"name" text,
	"profile" text,
	"self_link" text,
	CONSTRAINT gcp_compute_ssl_policies_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_ssl_policies');
CREATE TABLE IF NOT EXISTS "gcp_compute_ssl_policy_warnings" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"ssl_policy_cq_id" uuid,
	"policy_id" text,
	"code" text,
	"data" jsonb,
	"message" text,
	CONSTRAINT gcp_compute_ssl_policy_warnings_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_ssl_policy_warnings (cq_fetch_date, ssl_policy_cq_id);
SELECT setup_tsdb_child('gcp_compute_ssl_policy_warnings', 'ssl_policy_cq_id', 'gcp_compute_ssl_policies', 'cq_id');

-- Resource: compute.subnetworks
CREATE TABLE IF NOT EXISTS "gcp_compute_subnetworks" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"creation_timestamp" text,
	"description" text,
	"enable_flow_logs" boolean,
	"fingerprint" text,
	"gateway_address" text,
	"id" text,
	"ip_cidr_range" text,
	"ipv6_cidr_range" text,
	"kind" text,
	"log_config_aggregation_interval" text,
	"log_config_enable" boolean,
	"log_config_filter_expr" text,
	"log_config_flow_sampling" float,
	"log_config_metadata" text,
	"log_config_metadata_fields" text[],
	"name" text,
	"network" text,
	"private_ip_google_access" boolean,
	"private_ipv6_google_access" text,
	"purpose" text,
	"region" text,
	"role" text,
	"self_link" text,
	"state" text,
	CONSTRAINT gcp_compute_subnetworks_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_subnetworks');
CREATE TABLE IF NOT EXISTS "gcp_compute_subnetwork_secondary_ip_ranges" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"subnetwork_cq_id" uuid,
	"subnetwork_id" text,
	"ip_cidr_range" text,
	"range_name" text,
	CONSTRAINT gcp_compute_subnetwork_secondary_ip_ranges_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_subnetwork_secondary_ip_ranges (cq_fetch_date, subnetwork_cq_id);
SELECT setup_tsdb_child('gcp_compute_subnetwork_secondary_ip_ranges', 'subnetwork_cq_id', 'gcp_compute_subnetworks', 'cq_id');

-- Resource: compute.target_https_proxies
CREATE TABLE IF NOT EXISTS "gcp_compute_target_https_proxies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"authorization_policy" text,
	"creation_timestamp" timestamp without time zone,
	"description" text,
	"fingerprint" text,
	"id" text,
	"kind" text,
	"name" text,
	"proxy_bind" boolean,
	"quic_override" text,
	"region" text,
	"self_link" text,
	"server_tls_policy" text,
	"ssl_certificates" text[],
	"ssl_policy" text,
	"url_map" text,
	CONSTRAINT gcp_compute_target_https_proxies_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_target_https_proxies');

-- Resource: compute.target_ssl_proxies
CREATE TABLE IF NOT EXISTS "gcp_compute_target_ssl_proxies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"creation_timestamp" timestamp without time zone,
	"description" text,
	"id" text,
	"kind" text,
	"name" text,
	"proxy_header" text,
	"self_link" text,
	"service" text,
	"ssl_certificates" text[],
	"ssl_policy" text,
	CONSTRAINT gcp_compute_target_ssl_proxies_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_target_ssl_proxies');

-- Resource: compute.url_maps
CREATE TABLE IF NOT EXISTS "gcp_compute_url_maps" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"creation_timestamp" text,
	"cors_policy_allow_credentials" boolean,
	"cors_policy_allow_headers" text[],
	"cors_policy_allow_methods" text[],
	"cors_policy_allow_origin_regexes" text[],
	"cors_policy_allow_origins" text[],
	"cors_policy_disabled" boolean,
	"cors_policy_expose_headers" text[],
	"cors_policy_max_age" bigint,
	"fault_injection_policy_abort_http_status" bigint,
	"fault_injection_policy_abort_percentage" float,
	"fault_injection_policy_delay_fixed_delay_nanos" bigint,
	"fault_injection_policy_delay_fixed_delay_seconds" bigint,
	"fault_injection_policy_delay_percentage" float,
	"max_stream_duration_nanos" bigint,
	"max_stream_duration_seconds" bigint,
	"request_mirror_policy_backend_service" text,
	"retry_policy_num_retries" bigint,
	"retry_policy_per_try_timeout_nanos" bigint,
	"retry_policy_per_try_timeout_seconds" bigint,
	"retry_policy_retry_conditions" text[],
	"timeout_nanos" bigint,
	"timeout_seconds" bigint,
	"url_rewrite_host_rewrite" text,
	"url_rewrite_path_prefix_rewrite" text,
	"default_service" text,
	"default_url_redirect_host_redirect" text,
	"default_url_redirect_https_redirect" boolean,
	"default_url_redirect_path_redirect" text,
	"default_url_redirect_prefix_redirect" text,
	"default_url_redirect_redirect_response_code" text,
	"default_url_redirect_strip_query" boolean,
	"description" text,
	"fingerprint" text,
	"header_action_request_headers_to_add" jsonb,
	"header_action_request_headers_to_remove" text[],
	"header_action_response_headers_to_add" jsonb,
	"header_action_response_headers_to_remove" text[],
	"id" bigint,
	"kind" text,
	"name" text,
	"region" text,
	"self_link" text,
	CONSTRAINT gcp_compute_url_maps_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_url_maps');
CREATE TABLE IF NOT EXISTS "gcp_compute_url_map_weighted_backend_services" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"url_map_cq_id" uuid,
	"backend_service" text,
	"header_action" jsonb,
	"weight" bigint,
	CONSTRAINT gcp_compute_url_map_weighted_backend_services_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_url_map_weighted_backend_services (cq_fetch_date, url_map_cq_id);
SELECT setup_tsdb_child('gcp_compute_url_map_weighted_backend_services', 'url_map_cq_id', 'gcp_compute_url_maps', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_compute_url_map_host_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"url_map_cq_id" uuid,
	"description" text,
	"hosts" text[],
	"path_matcher" text,
	CONSTRAINT gcp_compute_url_map_host_rules_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_url_map_host_rules (cq_fetch_date, url_map_cq_id);
SELECT setup_tsdb_child('gcp_compute_url_map_host_rules', 'url_map_cq_id', 'gcp_compute_url_maps', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_compute_url_map_path_matchers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"url_map_cq_id" uuid,
	"default_route_action" jsonb,
	"default_service" text,
	"default_url_redirect_host_redirect" text,
	"default_url_redirect_https_redirect" boolean,
	"default_url_redirect_path_redirect" text,
	"default_url_redirect_prefix_redirect" text,
	"default_url_redirect_redirect_response_code" text,
	"default_url_redirect_strip_query" boolean,
	"description" text,
	"header_action" jsonb,
	"name" text,
	"path_rules" jsonb,
	"route_rules" jsonb,
	CONSTRAINT gcp_compute_url_map_path_matchers_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_url_map_path_matchers (cq_fetch_date, url_map_cq_id);
SELECT setup_tsdb_child('gcp_compute_url_map_path_matchers', 'url_map_cq_id', 'gcp_compute_url_maps', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_compute_url_map_tests" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"url_map_cq_id" uuid,
	"description" text,
	"expected_output_url" text,
	"expected_redirect_response_code" bigint,
	"headers" jsonb,
	"host" text,
	"path" text,
	"service" text,
	CONSTRAINT gcp_compute_url_map_tests_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_url_map_tests (cq_fetch_date, url_map_cq_id);
SELECT setup_tsdb_child('gcp_compute_url_map_tests', 'url_map_cq_id', 'gcp_compute_url_maps', 'cq_id');

-- Resource: compute.vpn_gateways
CREATE TABLE IF NOT EXISTS "gcp_compute_vpn_gateways" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"creation_timestamp" text,
	"description" text,
	"id" text,
	"kind" text,
	"label_fingerprint" text,
	"labels" jsonb,
	"name" text,
	"network" text,
	"region" text,
	"self_link" text,
	CONSTRAINT gcp_compute_vpn_gateways_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_compute_vpn_gateways');
CREATE TABLE IF NOT EXISTS "gcp_compute_vpn_gateway_vpn_interfaces" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"vpn_gateway_cq_id" uuid,
	"vpn_gateway_id" text,
	"id" text,
	"interconnect_attachment" text,
	"ip_address" text,
	CONSTRAINT gcp_compute_vpn_gateway_vpn_interfaces_pk PRIMARY KEY(cq_fetch_date,vpn_gateway_cq_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_compute_vpn_gateway_vpn_interfaces (cq_fetch_date, vpn_gateway_cq_id);
SELECT setup_tsdb_child('gcp_compute_vpn_gateway_vpn_interfaces', 'vpn_gateway_cq_id', 'gcp_compute_vpn_gateways', 'cq_id');

-- Resource: dns.managed_zones
CREATE TABLE IF NOT EXISTS "gcp_dns_managed_zones" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"creation_time" text,
	"description" text,
	"dns_name" text,
	"dnssec_config_kind" text,
	"dnssec_config_non_existence" text,
	"dnssec_config_state" text,
	"forwarding_config_kind" text,
	"id" text,
	"kind" text,
	"labels" jsonb,
	"name" text,
	"name_server_set" text,
	"name_servers" text[],
	"peering_config_kind" text,
	"peering_config_target_network_deactivate_time" text,
	"peering_config_target_network_kind" text,
	"peering_config_target_network_network_url" text,
	"private_visibility_config_kind" text,
	"reverse_lookup_config_kind" text,
	"service_directory_config_kind" text,
	"service_directory_config_namespace_deletion_time" text,
	"service_directory_config_namespace_kind" text,
	"service_directory_config_namespace_namespace_url" text,
	"visibility" text,
	CONSTRAINT gcp_dns_managed_zones_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_dns_managed_zones');
CREATE TABLE IF NOT EXISTS "gcp_dns_managed_zone_dnssec_config_default_key_specs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"managed_zone_cq_id" uuid,
	"managed_zone_id" text,
	"algorithm" text,
	"key_length" bigint,
	"key_type" text,
	"kind" text,
	CONSTRAINT gcp_dns_managed_zone_dnssec_config_default_key_specs_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_dns_managed_zone_dnssec_config_default_key_specs (cq_fetch_date, managed_zone_cq_id);
SELECT setup_tsdb_child('gcp_dns_managed_zone_dnssec_config_default_key_specs', 'managed_zone_cq_id', 'gcp_dns_managed_zones', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_dns_managed_zone_forwarding_config_target_name_servers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"managed_zone_cq_id" uuid,
	"managed_zone_id" text,
	"forwarding_path" text,
	"ipv4_address" text,
	"kind" text,
	CONSTRAINT gcp_dns_managed_zone_forwarding_config_target_name_servers_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_dns_managed_zone_forwarding_config_target_name_servers (cq_fetch_date, managed_zone_cq_id);
SELECT setup_tsdb_child('gcp_dns_managed_zone_forwarding_config_target_name_servers', 'managed_zone_cq_id', 'gcp_dns_managed_zones', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_dns_managed_zone_private_visibility_config_networks" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"managed_zone_cq_id" uuid,
	"managed_zone_id" text,
	"kind" text,
	"network_url" text,
	CONSTRAINT gcp_dns_managed_zone_private_visibility_config_networks_pk PRIMARY KEY(cq_fetch_date,managed_zone_cq_id,network_url),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_dns_managed_zone_private_visibility_config_networks (cq_fetch_date, managed_zone_cq_id);
SELECT setup_tsdb_child('gcp_dns_managed_zone_private_visibility_config_networks', 'managed_zone_cq_id', 'gcp_dns_managed_zones', 'cq_id');

-- Resource: dns.policies
CREATE TABLE IF NOT EXISTS "gcp_dns_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"alternative_name_server_config_kind" text,
	"description" text,
	"enable_inbound_forwarding" boolean,
	"enable_logging" boolean,
	"id" text,
	"kind" text,
	"name" text,
	CONSTRAINT gcp_dns_policies_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_dns_policies');
CREATE TABLE IF NOT EXISTS "gcp_dns_policy_alternative_name_servers" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"policy_cq_id" uuid,
	"policy_id" text,
	"forwarding_path" text,
	"ipv4_address" text,
	"kind" text,
	CONSTRAINT gcp_dns_policy_alternative_name_servers_pk PRIMARY KEY(cq_fetch_date,policy_cq_id,ipv4_address),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_dns_policy_alternative_name_servers (cq_fetch_date, policy_cq_id);
SELECT setup_tsdb_child('gcp_dns_policy_alternative_name_servers', 'policy_cq_id', 'gcp_dns_policies', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_dns_policy_networks" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"policy_cq_id" uuid,
	"policy_id" text,
	"kind" text,
	"network_url" text,
	CONSTRAINT gcp_dns_policy_networks_pk PRIMARY KEY(cq_fetch_date,policy_cq_id,network_url),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_dns_policy_networks (cq_fetch_date, policy_cq_id);
SELECT setup_tsdb_child('gcp_dns_policy_networks', 'policy_cq_id', 'gcp_dns_policies', 'cq_id');

-- Resource: domains.registrations
CREATE TABLE IF NOT EXISTS "gcp_domains_registrations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"admin_contact_email" text,
	"admin_contact_fax_number" text,
	"admin_contact_phone_number" text,
	"admin_contact_postal_address_address_lines" text[],
	"admin_contact_postal_address_administrative_area" text,
	"admin_contact_postal_address_language_code" text,
	"admin_contact_postal_address_locality" text,
	"admin_contact_postal_address_organization" text,
	"admin_contact_postal_address_postal_code" text,
	"admin_contact_postal_address_recipients" text[],
	"admin_contact_postal_address_region_code" text,
	"admin_contact_postal_address_revision" bigint,
	"admin_contact_postal_address_sorting_code" text,
	"admin_contact_postal_address_sublocality" text,
	"privacy" text,
	"registrant_contact_email" text,
	"registrant_contact_fax_number" text,
	"registrant_contact_phone_number" text,
	"registrant_contact_postal_address_address_lines" text[],
	"registrant_contact_postal_address_administrative_area" text,
	"registrant_contact_postal_address_language_code" text,
	"registrant_contact_postal_address_locality" text,
	"registrant_contact_postal_address_organization" text,
	"registrant_contact_postal_address_postal_code" text,
	"registrant_contact_postal_address_recipients" text[],
	"registrant_contact_postal_address_region_code" text,
	"registrant_contact_postal_address_revision" bigint,
	"registrant_contact_postal_address_sorting_code" text,
	"registrant_contact_postal_address_sublocality" text,
	"technical_contact_email" text,
	"technical_contact_fax_number" text,
	"technical_contact_phone_number" text,
	"technical_contact_postal_address_address_lines" text[],
	"technical_contact_postal_address_administrative_area" text,
	"technical_contact_postal_address_language_code" text,
	"technical_contact_postal_address_locality" text,
	"technical_contact_postal_address_organization" text,
	"technical_contact_postal_address_postal_code" text,
	"technical_contact_postal_address_recipients" text[],
	"technical_contact_postal_address_region_code" text,
	"technical_contact_postal_address_revision" bigint,
	"technical_contact_postal_address_sorting_code" text,
	"technical_contact_postal_address_sublocality" text,
	"create_time" text,
	"custom_dns_ds_records" jsonb,
	"custom_dns_name_servers" text[],
	"google_domains_dns_ds_records" jsonb,
	"google_domains_dns_ds_state" text,
	"google_domains_dns_name_servers" text[],
	"domain_name" text,
	"expire_time" text,
	"issues" text[],
	"labels" jsonb,
	"management_settings_renewal_method" text,
	"management_settings_transfer_lock_state" text,
	"name" text,
	"state" text,
	"supported_privacy" text[],
	CONSTRAINT gcp_domains_registrations_pk PRIMARY KEY(cq_fetch_date,project_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_domains_registrations');
CREATE TABLE IF NOT EXISTS "gcp_domains_registration_glue_records" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"registration_cq_id" uuid,
	"registration_name" text,
	"host_name" text,
	"ipv4_addresses" text[],
	"ipv6_addresses" text[],
	CONSTRAINT gcp_domains_registration_glue_records_pk PRIMARY KEY(cq_fetch_date,registration_cq_id,host_name),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_domains_registration_glue_records (cq_fetch_date, registration_cq_id);
SELECT setup_tsdb_child('gcp_domains_registration_glue_records', 'registration_cq_id', 'gcp_domains_registrations', 'cq_id');

-- Resource: iam.project_roles
CREATE TABLE IF NOT EXISTS "gcp_iam_roles" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"deleted" boolean,
	"description" text,
	"etag" text,
	"included_permissions" text[],
	"name" text,
	"stage" text,
	"title" text,
	CONSTRAINT gcp_iam_roles_pk PRIMARY KEY(cq_fetch_date,project_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_iam_roles');

-- Resource: iam.service_accounts
CREATE TABLE IF NOT EXISTS "gcp_iam_service_accounts" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"description" text,
	"disabled" boolean,
	"display_name" text,
	"email" text,
	"name" text,
	"oauth2_client_id" text,
	"project_id" text,
	"id" text,
	CONSTRAINT gcp_iam_service_accounts_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_iam_service_accounts');
CREATE TABLE IF NOT EXISTS "gcp_iam_service_account_keys" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"service_account_cq_id" uuid,
	"key_algorithm" text,
	"key_origin" text,
	"key_type" text,
	"name" text,
	"valid_after_time" timestamp without time zone,
	"valid_before_time" timestamp without time zone,
	CONSTRAINT gcp_iam_service_account_keys_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_iam_service_account_keys (cq_fetch_date, service_account_cq_id);
SELECT setup_tsdb_child('gcp_iam_service_account_keys', 'service_account_cq_id', 'gcp_iam_service_accounts', 'cq_id');

-- Resource: kms.keys
CREATE TABLE IF NOT EXISTS "gcp_kms_keyrings" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"location" text,
	"create_time" timestamp without time zone,
	"name" text,
	CONSTRAINT gcp_kms_keyrings_pk PRIMARY KEY(cq_fetch_date,project_id,location,name),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_kms_keyrings');
CREATE TABLE IF NOT EXISTS "gcp_kms_keyring_crypto_keys" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"keyring_cq_id" uuid,
	"project_id" text,
	"location" text,
	"policy" jsonb,
	"create_time" timestamp without time zone,
	"labels" jsonb,
	"name" text,
	"next_rotation_time" timestamp without time zone,
	"primary_algorithm" text,
	"primary_attestation_cert_chains_cavium_certs" text[],
	"primary_attestation_cert_chains_google_card_certs" text[],
	"primary_attestation_cert_chains_google_partition_certs" text[],
	"primary_attestation_content" text,
	"primary_attestation_format" text,
	"primary_create_time" timestamp without time zone,
	"primary_destroy_event_time" timestamp without time zone,
	"primary_destroy_time" timestamp without time zone,
	"primary_external_protection_level_options_external_key_uri" text,
	"primary_generate_time" timestamp without time zone,
	"primary_import_failure_reason" text,
	"primary_import_job" text,
	"primary_import_time" timestamp without time zone,
	"primary_name" text,
	"primary_protection_level" text,
	"primary_state" text,
	"purpose" text,
	"rotation_period" text,
	"version_template_algorithm" text,
	"version_template_protection_level" text,
	CONSTRAINT gcp_kms_keyring_crypto_keys_pk PRIMARY KEY(cq_fetch_date,keyring_cq_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_kms_keyring_crypto_keys (cq_fetch_date, keyring_cq_id);
SELECT setup_tsdb_child('gcp_kms_keyring_crypto_keys', 'keyring_cq_id', 'gcp_kms_keyrings', 'cq_id');

-- Resource: logging.metrics
CREATE TABLE IF NOT EXISTS "gcp_logging_metrics" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"exponential_buckets_options_growth_factor" float,
	"exponential_buckets_options_num_finite_buckets" bigint,
	"exponential_buckets_options_scale" float,
	"linear_buckets_options_num_finite_buckets" bigint,
	"linear_buckets_options_offset" float,
	"linear_buckets_options_width" float,
	"create_time" text,
	"description" text,
	"filter" text,
	"label_extractors" jsonb,
	"metric_descriptor_description" text,
	"metric_descriptor_display_name" text,
	"metric_descriptor_launch_stage" text,
	"metric_descriptor_metadata_ingest_delay" text,
	"metric_descriptor_metadata_sample_period" text,
	"metric_descriptor_metric_kind" text,
	"metric_descriptor_monitored_resource_types" text[],
	"metric_descriptor_name" text,
	"metric_descriptor_type" text,
	"metric_descriptor_unit" text,
	"metric_descriptor_value_type" text,
	"name" text,
	"update_time" text,
	"value_extractor" text,
	"version" text,
	CONSTRAINT gcp_logging_metrics_pk PRIMARY KEY(cq_fetch_date,project_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_logging_metrics');
CREATE TABLE IF NOT EXISTS "gcp_logging_metric_descriptor_labels" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"metric_cq_id" uuid,
	"description" text,
	"key" text,
	"value_type" text,
	CONSTRAINT gcp_logging_metric_descriptor_labels_pk PRIMARY KEY(cq_fetch_date,metric_cq_id,key),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_logging_metric_descriptor_labels (cq_fetch_date, metric_cq_id);
SELECT setup_tsdb_child('gcp_logging_metric_descriptor_labels', 'metric_cq_id', 'gcp_logging_metrics', 'cq_id');

-- Resource: logging.sinks
CREATE TABLE IF NOT EXISTS "gcp_logging_sinks" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"bigquery_options_use_partitioned_tables" boolean,
	"bigquery_options_uses_timestamp_column_partitioning" boolean,
	"create_time" text,
	"description" text,
	"destination" text,
	"disabled" boolean,
	"filter" text,
	"include_children" boolean,
	"name" text,
	"output_version_format" text,
	"update_time" text,
	"writer_identity" text,
	CONSTRAINT gcp_logging_sinks_pk PRIMARY KEY(cq_fetch_date,project_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_logging_sinks');
CREATE TABLE IF NOT EXISTS "gcp_logging_sink_exclusions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"sink_cq_id" uuid,
	"create_time" text,
	"description" text,
	"disabled" boolean,
	"filter" text,
	"name" text,
	"update_time" text,
	CONSTRAINT gcp_logging_sink_exclusions_pk PRIMARY KEY(cq_fetch_date,sink_cq_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_logging_sink_exclusions (cq_fetch_date, sink_cq_id);
SELECT setup_tsdb_child('gcp_logging_sink_exclusions', 'sink_cq_id', 'gcp_logging_sinks', 'cq_id');

-- Resource: monitoring.alert_policies
CREATE TABLE IF NOT EXISTS "gcp_monitoring_alert_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"combiner" text,
	"creation_record_mutate_time" text,
	"creation_record_mutated_by" text,
	"display_name" text,
	"documentation_content" text,
	"documentation_mime_type" text,
	"enabled" boolean,
	"mutate_time" text,
	"mutated_by" text,
	"name" text,
	"notification_channels" text[],
	"labels" jsonb,
	"validity_code" bigint,
	"validity_message" text,
	CONSTRAINT gcp_monitoring_alert_policies_pk PRIMARY KEY(cq_fetch_date,project_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_monitoring_alert_policies');
CREATE TABLE IF NOT EXISTS "gcp_monitoring_alert_policy_conditions" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"alert_policy_cq_id" uuid,
	"absent_duration" text,
	"absent_filter" text,
	"absent_trigger_count" bigint,
	"absent_trigger_percent" float,
	"monitoring_query_language_duration" text,
	"monitoring_query_language_query" text,
	"monitoring_query_language_trigger_count" bigint,
	"monitoring_query_language_trigger_percent" float,
	"threshold_comparison" text,
	"threshold_denominator_filter" text,
	"threshold_duration" text,
	"threshold_filter" text,
	"threshold_value" float,
	"threshold_trigger_count" bigint,
	"threshold_trigger_percent" float,
	"display_name" text,
	"name" text,
	CONSTRAINT gcp_monitoring_alert_policy_conditions_pk PRIMARY KEY(cq_fetch_date,alert_policy_cq_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_monitoring_alert_policy_conditions (cq_fetch_date, alert_policy_cq_id);
SELECT setup_tsdb_child('gcp_monitoring_alert_policy_conditions', 'alert_policy_cq_id', 'gcp_monitoring_alert_policies', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_monitoring_alert_policy_condition_absent_aggregations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"alert_policy_condition_cq_id" uuid,
	"alignment_period" text,
	"cross_series_reducer" text,
	"group_by_fields" text[],
	"per_series_aligner" text,
	CONSTRAINT gcp_monitoring_alert_policy_condition_absent_aggregations_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_monitoring_alert_policy_condition_absent_aggregations (cq_fetch_date, alert_policy_condition_cq_id);
SELECT setup_tsdb_child('gcp_monitoring_alert_policy_condition_absent_aggregations', 'alert_policy_condition_cq_id', 'gcp_monitoring_alert_policy_conditions', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_monitoring_alert_policy_condition_threshold_aggregations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"alert_policy_condition_cq_id" uuid,
	"alignment_period" text,
	"cross_series_reducer" text,
	"group_by_fields" text[],
	"per_series_aligner" text,
	CONSTRAINT gcp_monitoring_alert_policy_condition_threshold_aggregations_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_monitoring_alert_policy_condition_threshold_aggregations (cq_fetch_date, alert_policy_condition_cq_id);
SELECT setup_tsdb_child('gcp_monitoring_alert_policy_condition_threshold_aggregations', 'alert_policy_condition_cq_id', 'gcp_monitoring_alert_policy_conditions', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_monitoring_alert_policy_condition_denominator_aggs" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"alert_policy_condition_cq_id" uuid,
	"alignment_period" text,
	"cross_series_reducer" text,
	"group_by_fields" text[],
	"per_series_aligner" text,
	CONSTRAINT gcp_monitoring_alert_policy_condition_denominator_aggs_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_monitoring_alert_policy_condition_denominator_aggs (cq_fetch_date, alert_policy_condition_cq_id);
SELECT setup_tsdb_child('gcp_monitoring_alert_policy_condition_denominator_aggs', 'alert_policy_condition_cq_id', 'gcp_monitoring_alert_policy_conditions', 'cq_id');

-- Resource: resource_manager.folders
CREATE TABLE IF NOT EXISTS "gcp_resource_manager_folders" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"policy" jsonb,
	"create_time" timestamp without time zone,
	"delete_time" timestamp without time zone,
	"display_name" text,
	"etag" text,
	"name" text,
	"parent" text,
	"state" text,
	"update_time" timestamp without time zone,
	CONSTRAINT gcp_resource_manager_folders_pk PRIMARY KEY(cq_fetch_date,project_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_resource_manager_folders');

-- Resource: resource_manager.projects
CREATE TABLE IF NOT EXISTS "gcp_resource_manager_projects" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"policy" jsonb,
	"create_time" timestamp without time zone,
	"delete_time" timestamp without time zone,
	"display_name" text,
	"etag" text,
	"labels" jsonb,
	"name" text,
	"parent" text,
	"project_id" text,
	"state" text,
	"update_time" timestamp without time zone,
	CONSTRAINT gcp_resource_manager_projects_pk PRIMARY KEY(cq_fetch_date,project_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_resource_manager_projects');

-- Resource: sql.instances
CREATE TABLE IF NOT EXISTS "gcp_sql_instances" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"backend_type" text,
	"connection_name" text,
	"current_disk_size" bigint,
	"database_version" text,
	"disk_encryption_configuration_kind" text,
	"disk_encryption_configuration_kms_key_name" text,
	"disk_encryption_status_kind" text,
	"disk_encryption_status_kms_key_version_name" text,
	"etag" text,
	"failover_replica_available" boolean,
	"failover_replica_name" text,
	"gce_zone" text,
	"instance_type" text,
	"ipv6_address" text,
	"kind" text,
	"master_instance_name" text,
	"max_disk_size" bigint,
	"name" text,
	"on_premises_configuration_ca_certificate" text,
	"on_premises_configuration_client_certificate" text,
	"on_premises_configuration_client_key" text,
	"on_premises_configuration_dump_file_path" text,
	"on_premises_configuration_host_port" text,
	"on_premises_configuration_kind" text,
	"on_premises_configuration_password" text,
	"on_premises_configuration_username" text,
	"project" text,
	"region" text,
	"failover_target" boolean,
	"configuration_kind" text,
	"mysql_replica_configuration_ca_certificate" text,
	"mysql_replica_configuration_client_certificate" text,
	"mysql_replica_configuration_client_key" text,
	"mysql_replica_configuration_connect_retry_interval" bigint,
	"mysql_replica_configuration_dump_file_path" text,
	"mysql_replica_configuration_kind" text,
	"mysql_replica_configuration_master_heartbeat_period" bigint,
	"mysql_replica_configuration_password" text,
	"mysql_replica_configuration_ssl_cipher" text,
	"mysql_replica_configuration_username" text,
	"mysql_replica_configuration_verify_server_certificate" boolean,
	"replica_names" text[],
	"root_password" text,
	"satisfies_pzs" boolean,
	"scheduled_maintenance_can_defer" boolean,
	"scheduled_maintenance_can_reschedule" boolean,
	"scheduled_maintenance_start_time" text,
	"secondary_gce_zone" text,
	"self_link" text,
	"server_ca_cert" text,
	"server_ca_cert_cert_serial_number" text,
	"server_ca_cert_common_name" text,
	"server_ca_cert_create_time" text,
	"server_ca_cert_expiration_time" text,
	"server_ca_cert_instance" text,
	"server_ca_cert_kind" text,
	"server_ca_cert_self_link" text,
	"server_ca_cert_sha1_fingerprint" text,
	"service_account_email_address" text,
	"settings_activation_policy" text,
	"settings_active_directory_config_domain" text,
	"settings_active_directory_config_kind" text,
	"settings_authorized_gae_applications" text[],
	"settings_availability_type" text,
	"settings_backup_retention_settings_retained_backups" bigint,
	"settings_backup_retention_settings_retention_unit" text,
	"settings_backup_binary_log_enabled" boolean,
	"settings_backup_enabled" boolean,
	"settings_backup_kind" text,
	"settings_backup_location" text,
	"settings_backup_point_in_time_recovery_enabled" boolean,
	"settings_backup_replication_log_archiving_enabled" boolean,
	"settings_backup_start_time" text,
	"settings_backup_transaction_log_retention_days" bigint,
	"settings_collation" text,
	"settings_crash_safe_replication_enabled" boolean,
	"settings_data_disk_size_gb" bigint,
	"settings_data_disk_type" text,
	"settings_database_flags" jsonb,
	"settings_database_replication_enabled" boolean,
	"settings_insights_config_query_insights_enabled" boolean,
	"settings_insights_config_query_string_length" bigint,
	"settings_insights_config_record_application_tags" boolean,
	"settings_insights_config_record_client_address" boolean,
	"settings_ip_configuration_ipv4_enabled" boolean,
	"settings_ip_configuration_private_network" text,
	"settings_ip_configuration_require_ssl" boolean,
	"settings_kind" text,
	"settings_location_preference_follow_gae_application" text,
	"settings_location_preference_kind" text,
	"settings_location_preference_secondary_zone" text,
	"settings_location_preference_zone" text,
	"settings_maintenance_window_day" bigint,
	"settings_maintenance_window_hour" bigint,
	"settings_maintenance_window_kind" text,
	"settings_maintenance_window_update_track" text,
	"settings_pricing_plan" text,
	"settings_replication_type" text,
	"settings_version" bigint,
	"settings_storage_auto_resize" boolean,
	"settings_storage_auto_resize_limit" bigint,
	"settings_tier" text,
	"settings_user_labels" jsonb,
	"state" text,
	"suspension_reason" text[],
	CONSTRAINT gcp_sql_instances_pk PRIMARY KEY(cq_fetch_date,project_id,name),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_sql_instances');
CREATE TABLE IF NOT EXISTS "gcp_sql_instance_ip_addresses" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"instance_cq_id" uuid,
	"instance_name" text,
	"ip_address" text,
	"time_to_retire" text,
	"type" text,
	CONSTRAINT gcp_sql_instance_ip_addresses_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_sql_instance_ip_addresses (cq_fetch_date, instance_cq_id);
SELECT setup_tsdb_child('gcp_sql_instance_ip_addresses', 'instance_cq_id', 'gcp_sql_instances', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_sql_instance_settings_deny_maintenance_periods" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"instance_cq_id" uuid,
	"instance_name" text,
	"end_date" text,
	"start_date" text,
	"time" text,
	CONSTRAINT gcp_sql_instance_settings_deny_maintenance_periods_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_sql_instance_settings_deny_maintenance_periods (cq_fetch_date, instance_cq_id);
SELECT setup_tsdb_child('gcp_sql_instance_settings_deny_maintenance_periods', 'instance_cq_id', 'gcp_sql_instances', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_sql_instance_settings_ip_config_authorized_networks" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"instance_cq_id" uuid,
	"instance_name" text,
	"expiration_time" text,
	"kind" text,
	"name" text,
	"value" text,
	CONSTRAINT gcp_sql_instance_settings_ip_config_authorized_networks_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_sql_instance_settings_ip_config_authorized_networks (cq_fetch_date, instance_cq_id);
SELECT setup_tsdb_child('gcp_sql_instance_settings_ip_config_authorized_networks', 'instance_cq_id', 'gcp_sql_instances', 'cq_id');

-- Resource: storage.buckets
CREATE TABLE IF NOT EXISTS "gcp_storage_buckets" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"project_id" text,
	"billing_requester_pays" boolean,
	"default_event_based_hold" boolean,
	"encryption_default_kms_key_name" text,
	"etag" text,
	"iam_configuration_bucket_policy_only_enabled" boolean,
	"iam_configuration_bucket_policy_only_locked_time" text,
	"iam_configuration_public_access_prevention" text,
	"iam_configuration_uniform_bucket_level_access_enabled" boolean,
	"iam_configuration_uniform_bucket_level_access_locked_time" text,
	"id" text,
	"kind" text,
	"labels" jsonb,
	"location" text,
	"location_type" text,
	"logging_log_bucket" text,
	"logging_log_object_prefix" text,
	"metageneration" bigint,
	"name" text,
	"owner_entity" text,
	"owner_entity_id" text,
	"project_number" bigint,
	"retention_policy_effective_time" text,
	"retention_policy_is_locked" boolean,
	"retention_policy_retention_period" bigint,
	"satisfies_pzs" boolean,
	"self_link" text,
	"storage_class" text,
	"time_created" text,
	"updated" text,
	"versioning_enabled" boolean,
	"website_main_page_suffix" text,
	"website_not_found_page" text,
	"zone_affinity" text[],
	"policy" jsonb,
	CONSTRAINT gcp_storage_buckets_pk PRIMARY KEY(cq_fetch_date,project_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('gcp_storage_buckets');
CREATE TABLE IF NOT EXISTS "gcp_storage_bucket_acls" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"bucket_cq_id" uuid,
	"bucket_id" text,
	"bucket" text,
	"domain" text,
	"email" text,
	"entity" text,
	"entity_id" text,
	"etag" text,
	"id" text,
	"kind" text,
	"project_team_project_number" text,
	"project_team" text,
	"role" text,
	"self_link" text,
	CONSTRAINT gcp_storage_bucket_acls_pk PRIMARY KEY(cq_fetch_date,bucket_cq_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_storage_bucket_acls (cq_fetch_date, bucket_cq_id);
SELECT setup_tsdb_child('gcp_storage_bucket_acls', 'bucket_cq_id', 'gcp_storage_buckets', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_storage_bucket_cors" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"bucket_cq_id" uuid,
	"bucket_id" text,
	"max_age_seconds" bigint,
	"method" text[],
	"origin" text[],
	"response_header" text[],
	CONSTRAINT gcp_storage_bucket_cors_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_storage_bucket_cors (cq_fetch_date, bucket_cq_id);
SELECT setup_tsdb_child('gcp_storage_bucket_cors', 'bucket_cq_id', 'gcp_storage_buckets', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_storage_bucket_default_object_acls" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"bucket_cq_id" uuid,
	"bucket_id" text,
	"bucket" text,
	"domain" text,
	"email" text,
	"entity" text,
	"entity_id" text,
	"etag" text,
	"generation" bigint,
	"id" text,
	"kind" text,
	"object" text,
	"project_team_project_number" text,
	"project_team" text,
	"role" text,
	"self_link" text,
	CONSTRAINT gcp_storage_bucket_default_object_acls_pk PRIMARY KEY(cq_fetch_date,bucket_cq_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_storage_bucket_default_object_acls (cq_fetch_date, bucket_cq_id);
SELECT setup_tsdb_child('gcp_storage_bucket_default_object_acls', 'bucket_cq_id', 'gcp_storage_buckets', 'cq_id');
CREATE TABLE IF NOT EXISTS "gcp_storage_bucket_lifecycle_rules" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"bucket_cq_id" uuid,
	"bucket_id" text,
	"action_storage_class" text,
	"action_type" text,
	"condition_age" bigint,
	"condition_created_before" text,
	"condition_custom_time_before" text,
	"condition_days_since_custom_time" bigint,
	"condition_days_since_noncurrent_time" bigint,
	"condition_is_live" boolean,
	"condition_matches_pattern" text,
	"condition_matches_storage_class" text[],
	"condition_noncurrent_time_before" text,
	"condition_num_newer_versions" bigint,
	CONSTRAINT gcp_storage_bucket_lifecycle_rules_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON gcp_storage_bucket_lifecycle_rules (cq_fetch_date, bucket_cq_id);
SELECT setup_tsdb_child('gcp_storage_bucket_lifecycle_rules', 'bucket_cq_id', 'gcp_storage_buckets', 'cq_id');
